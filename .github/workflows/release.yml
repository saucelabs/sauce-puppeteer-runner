name: Release New Version

on:
  workflow_dispatch:
    inputs:
      releaseType:
        description: 'Release type - major, minor or patch'
        required: false
        default: ''
      preReleaseFlavor:
        description: 'Pre-Release flavor - rc, beta, or anything'
        required: false
        default: ''

env:
  NODE_VERSION: 16

jobs:
  create-release-draft:
    runs-on: ubuntu-latest
    steps:
      - name: Check Tag
        id: prep
        run: |
          TAG_NAME=$(curl -s -H "Authorization: token ${{ github.token }}" \
                      https://api.github.com/repos/${{ github.repository }}/releases | \
                      jq -r "[.[] | select(.body | contains(\"- jobId: ${{ github.run_id }}\\n\"))] | first | .tag_name | select (. != null)")
          IS_DRAFT=$(curl -s -H "Authorization: token ${{ github.token }}" \
                      https://api.github.com/repos/${{ github.repository }}/releases | \
                      jq -r "[.[] | select(.body | contains(\"- jobId: ${{ github.run_id }}\\n\"))] | first | .draft | select (. != null)")

          if [ -n "${TAG_NAME}" ] && [ "${IS_DRAFT}" == "false" ];then
              echo "A release has already been published for this run_id (${{ github.run_id }} / ${TAG_NAME})."
              exit 1
          fi

          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v3
        if: ${{ steps.prep.outputs.tag_name == '' }}
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Setup Node
        if: ${{ steps.prep.outputs.tag_name == '' }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }
          cache: npm

      - name: Setup Git
        if: ${{ steps.prep.outputs.tag_name == '' }}
        run: |
          git config --global user.name "devx-sauce-bot"
          git config --global user.email "devx.bot@saucelabs.com"

      - name: Install Dependencies
        if: ${{ steps.prep.outputs.tag_name == '' }}
        run: npm ci

      - name: Generate (Pre-)Release Draft
        if: ${{ steps.prep.outputs.tag_name == '' }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          if [ -z "${{ github.event.inputs.releaseType }}" ] && [ -z "${{ github.event.inputs.preReleaseFlavor }}" ];then
            echo "No release type provided."
            exit 1
          fi

          if [ -n "${{ github.event.inputs.preReleaseFlavor }}" ];then
            PRE_RELEASE_ARGS="--preRelease=${{ github.event.inputs.preReleaseFlavor }} --github.preRelease"
          fi

          npx release-it ${{ github.event.inputs.releaseType }} ${PRE_RELEASE_ARGS}

  release-docker:
    runs-on: ubuntu-latest
    needs: [create-release-draft]
    steps:
      - name: Find Matching Draft Tag
        id: prep
        run: |
          VERSION=$(curl -s -H "Authorization: token ${{ github.token }}" \
                      https://api.github.com/repos/${{ github.repository }}/releases | \
                      jq -r "[.[] | select(.draft == true) | select(.body | contains(\"- jobId: ${{ github.run_id }}\\n\"))] | first | .tag_name")
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ github.token }}" \
                      https://api.github.com/repos/${{ github.repository }}/releases | \
                      jq -r "[.[] | select(.draft == true) | select(.body | contains(\"- jobId: ${{ github.run_id }}\\n\"))] | first | .id")

          if [ "${VERSION}" = "" ];then
              echo "No draft version found"
              exit 1
          fi

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "release_id=${RELEASE_ID}" >> $GITHUB_OUTPUT

      - run: echo "${{ steps.prep.outputs.release_id }} - ${{  steps.prep.outputs.version }}"

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.prep.outputs.version }}

      - name: Update Release Version
        run: |
          npm version --no-git-tag-version ${{  steps.prep.outputs.version }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get Puppeteer Version
        run: |
          PUPPETEER_VERSION=$(< package-lock.json jq -r '.dependencies["puppeteer-core"].version')
          echo "puppeteer_version=$PUPPETEER_VERSION" >> $GITHUB_ENV

      - name: Build and Push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: |
            saucelabs/stt-puppeteer-jest-node:latest
            saucelabs/stt-puppeteer-jest-node:${{ steps.prep.outputs.version }}
          build-args: |
            BUILD_TAG=${{ steps.prep.outputs.version }}
            PUPPETEER_VERSION=${{ env.puppeteer_version }}

  publish-release:
    runs-on: ubuntu-latest
    needs: [release-docker]
    steps:
      - name: Find Matching Draft Tag
        id: prep
        run: |
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ github.token }}" \
                      https://api.github.com/repos/${{ github.repository }}/releases | \
                      jq -r "[.[] | select(.draft == true) | select(.body | contains(\"- jobId: ${{ github.run_id }}\\n\"))] | first | .id")

          if [ "${RELEASE_ID}" = "" ];then
              echo "No draft version found"
              exit 1
          fi

          echo "release_id=${RELEASE_ID}" >> $GITHUB_OUTPUT

      - name: Publish Release
        run: |
          curl -f -X PATCH -H "Authorization: token ${{ github.token }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.prep.outputs.release_id }} \
            -d '{"draft":"false"}'
