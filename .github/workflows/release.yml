name: Release New Version

on:
  workflow_dispatch:
    inputs:
      releaseType:
        description: 'Release type - major, minor or patch'
        required: false
        default: ''
      preReleaseFlavor:
        description: 'Pre-Release flavor - rc, beta, or anything'
        required: false
        default: ''

jobs:
  create-release-draft:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Setup Node version
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: Setup Git
        run: |
          git config --global user.name "devx-sauce-bot"
          git config --global user.email "devx.bot@saucelabs.com"

      - name: Install dependencies
        run: npm ci

      - name: generate (pre-)release draft
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          if [ -z "${{ github.event.inputs.releaseType }}" ] && [ -z "${{ github.event.inputs.preReleaseFlavor }}" ];then
            echo "No release type provided."
            exit 1
          fi

          if [ -n "${{ github.event.inputs.preReleaseFlavor }}" ];then
            PRE_RELEASE_ARGS="--preRelease=${{ github.event.inputs.preReleaseFlavor }} --github.preRelease"
          fi

          npx release-it ${{ github.event.inputs.releaseType }} ${PRE_RELEASE_ARGS}

  release-docker:
    runs-on: ubuntu-latest
    needs: [create-release-draft]
    steps:
      - name: Find matching draft tag
        id: prep
        run: |
          VERSION=$(curl -s -H "Authorization: token ${{ github.token }}" \
                      https://api.github.com/repos/${{ github.repository }}/releases | \
                      jq -r "[.[] | select(.draft == true) | select(.body | contains(\"- jobId: ${{ github.run_id }}\\n\"))] | first | .tag_name")
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ github.token }}" \
                      https://api.github.com/repos/${{ github.repository }}/releases | \
                      jq -r "[.[] | select(.draft == true) | select(.body | contains(\"- jobId: ${{ github.run_id }}\\n\"))] | first | .id")

          if [ "${VERSION}" = "" ];then
              echo "No draft version found"
              exit 1
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=release_id::${RELEASE_ID}

      - run: echo "${{ steps.prep.outputs.release_id }} - ${{  steps.prep.outputs.version }}"

      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.prep.outputs.version }}

      - name: Update Release version
        run: |
          npm version --no-git-tag-version ${{  steps.prep.outputs.version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          context: .
          file: ./Dockerfile
          tags: |
            saucelabs/stt-puppeteer-jest-node:latest
            saucelabs/stt-puppeteer-jest:${{ steps.prep.outputs.version }}
          build-args: |
            BUILD_TAG=${{ steps.prep.outputs.version }}

  release-template-bundle:
    runs-on: ubuntu-latest
    needs: [create-release-draft]
    steps:
      - name: Find matching draft tag
        id: prep
        run: |
          VERSION=$(curl -s -H "Authorization: token ${{ github.token }}" \
                      https://api.github.com/repos/${{ github.repository }}/releases | \
                      jq -r "[.[] | select(.draft == true) | select(.body | contains(\"- jobId: ${{ github.run_id }}\\n\"))] | first | .tag_name")
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ github.token }}" \
                      https://api.github.com/repos/${{ github.repository }}/releases | \
                      jq -r "[.[] | select(.draft == true) | select(.body | contains(\"- jobId: ${{ github.run_id }}\\n\"))] | first | .id")

          if [ "${VERSION}" = "" ];then
              echo "No draft version found"
              exit 1
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=release_id::${RELEASE_ID}

      - run: echo "${{ steps.prep.outputs.release_id }} - ${{  steps.prep.outputs.version }}"

      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.prep.outputs.version }}

      - name: Use Node.js v14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: Update Release version
        run: |
          npm version --no-git-tag-version ${{  steps.prep.outputs.version }}
          PUPPETEER_VER=`< package-lock.json  jq -r '.dependencies["puppeteer-core"].version'`
          sed -i "s/##VERSION##/${PUPPETEER_VER}/g" .saucetpl/.sauce/config.yml

      - name: Archive template
        run: cd .saucetpl && tar -czf ../saucetpl.tar.gz .

      - name: Upload Template Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.prep.outputs.release_id }}/assets?name=saucetpl.tar.gz
          asset_path: ./saucetpl.tar.gz
          asset_name: saucetpl.tar.gz
          asset_content_type: application/tar+gzip

  publish-release:
    runs-on: ubuntu-latest
    needs: [release-docker,  release-template-bundle]
    steps:
      - name: Find matching draft tag
        id: prep
        run: |
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ github.token }}" \
                      https://api.github.com/repos/${{ github.repository }}/releases | \
                      jq -r "[.[] | select(.draft == true) | select(.body | contains(\"- jobId: ${{ github.run_id }}\\n\"))] | first | .id")

          if [ "${RELEASE_ID}" = "" ];then
              echo "No draft version found"
              exit 1
          fi
          echo ::set-output name=release_id::${RELEASE_ID}

      - name: Publish release
        run: |
          curl -f -X PATCH -H "Authorization: token ${{ github.token }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.prep.outputs.release_id }} \
            -d '{"draft":"false"}'
